--- 
page_id: gettingStarted
title:      Getting started with DataMapper 0.2.5
created_at: Wed Aug 29 20:36:53 +0930 2007
filter:
  - erb
  - coderay
  - textile
--- 

h1. <%= @page.title %>

First, if you think you might need some help, there's an active community supporting DataMapper through "the mailing list":http://groups.google.com/group/datamapper and the @#datamapper@ IRC channel on irc.freenode.net.

So lets imagine we're setting up some models for a blogging app. We'll keep it nice and simple. The first thing to decide on is how what models we want. Say a Post, Category and Comment to be attached to posts.

h2. Install DataMapper

If you have RubyGems installed, pop open your console and install DataMapper.

<notextile>
<coderay lang="bash" line_numbers="inline">
$ gem install datamapper
</coderay>
</notextile>

h2. Install the "DataObjects.rb":http://dataobjects.devjavu.com drivers. 

Issue the following command to install your preferred flavor of DataObjects. This is the equivalent to @gem install mysql@ when you installed ActiveRecord.

<notextile>
<coderay lang="bash" line_numbers="inline">
$ gem install do_mysql # or do_sqlite3 or do_postgres
</coderay>
</notextile>

h2. Require it in your application

<notextile>
<coderay lang="ruby" line_numbers="inline">
require 'rubygems'
require 'data_mapper'
</coderay>
</notextile>

h2. Specify your database connection

You need make sure this is set before you define your models.

<notextile>
<coderay lang="ruby" line_numbers="inline">
DataMapper::Database.setup({
  :adapter  => 'mysql',
  :host     => 'localhost',
  :username => 'root',
  :password => 'R00tPaswooooord',
  :database => 'myspiffyblog_development'
})
</coderay>
</notextile>

h2. Define your models

The Post model will inherits from DataMapper::Base. The convention with model names is to use the singular, not plural version. 

<notextile>
<coderay lang="ruby" line_numbers="inline">
class Post < DataMapper::Base
  property :title, :string
  property :body, :text
  property :created_at, :datetime
end
</coderay>
</notextile>

You can also mix-in DataMapper through an @include@.

<notextile>
<coderay lang="ruby" line_numbers="inline">
class Post 
  include DataMapper::Persistence
  
  property :title, :string
  property :body, :text
  property :created_at, :datetime
end
</coderay>
</notextile>

h3. Associations

We want to associate the posts with the categories and comments. 

<notextile>
<coderay lang="ruby" line_numbers="inline">
class Category < DataMapper::Base  
  property :name, :string

  has_many :posts
end

class Comment < DataMapper::Base
  property :posted_by, :string
  property :email, :string
  property :url, :string
  property :body, :text

  belongs_to :post
end

# Now we re-open our Post class to define the associations.  
# This would be best included in with the original definition 
# of the class, but for the purposes of our demo, this'll do.
class Post
  has_many :comments
  belongs_to :category
end
</coderay>
</notextile>

h2. Set up your database tables

<notextile>
<coderay lang="ruby" line_numbers="inline">
Post.table.create!
Category.table.create!
Comment.table.create!
</coderay>
</notextile>

This will issue the necessary CREATE statements to define each table according to their properties.