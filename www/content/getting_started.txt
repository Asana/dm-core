--- 
page_id: gettingStarted
title:      Getting started with DataMapper 0.3.0
created_at: Wed Aug 29 20:36:53 +0930 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

First, if you think you might need some help, there's an active community supporting DataMapper through "the mailing list":http://groups.google.com/group/datamapper and the @#datamapper@ IRC channel on irc.freenode.net.

So lets imagine we're setting up some models for a blogging app. We'll keep it nice and simple. The first thing to decide on is what models we want. Post is a given. So is Comment. But let's mix it up and do Category too.

h2. Install DataMapper

If you have RubyGems installed, pop open your console and install DataMapper.

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
gem install datamapper
<% end %>

h2. Install the "DataObjects.rb":http://dataobjects.devjavu.com drivers. 

Issue the following command to install your preferred flavor of DataObjects. This is the equivalent to @gem install mysql@ when you installed ActiveRecord.

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
gem install do_mysql # or do_sqlite3 or do_postgres
<% end %>

h2. Require it in your application

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
require 'rubygems'
require 'data_mapper'
<% end %>

h2. Specify your database connection

You need make sure this is set before you define your models.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
DataMapper::Database.setup({
  :adapter  => 'mysql',
  :host     => 'localhost',
  :username => 'root',
  :password => 'R00tPaswooooord',
  :database => 'myspiffyblog_development'
})
<% end %>

h2. Define your models

The Post model should inherit from DataMapper::Base. The convention with model names is to use the singular, not plural version. 

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post < DataMapper::Base
  property :title, :string
  property :body, :text
  property :created_at, :datetime
end
<% end %>

You can also mix-in DataMapper through an @include@.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post 
  include DataMapper::Persistence
  
  property :title, :string
  property :body, :text
  property :created_at, :datetime
end
<% end %>

h3. Associations

We want to associate the posts with the categories and comments. 

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Category < DataMapper::Base  
  property :name, :string

  has_many :posts
end

class Comment < DataMapper::Base
  property :posted_by, :string
  property :email, :string
  property :url, :string
  property :body, :text

  belongs_to :post
end

# Now we re-open our Post class to define the associations.  
# This would be best included in with the original definition 
# of the class, but for the purposes of our demo, this'll do.
class Post
  has_many :comments
  belongs_to :category
end
<% end %>

h2. Set up your database tables

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
Post.table.create!
Category.table.create!
Comment.table.create!
<% end %>

This will issue the necessary CREATE statements to define each table according to their properties.

You could also do:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
DataMapper::Persistence.auto_migrate!
<% end %>